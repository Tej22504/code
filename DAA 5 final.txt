#include <iostream>
using namespace std;
#define MAX_N 10
void printSolution(int board[MAX_N][MAX_N],int n)
{
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			cout<<" "<<board[i][j]<<" ";
		}
		cout<<endl;
	}
	cout<<endl;
}

bool isSafe(int board[MAX_N][MAX_N],int row,int col,int n)
{
	int i,j;
	for(int i=0;i<col;i++)				//left side of row
		if(board[row][i])
			return false;
	
	for(i=row,j=col;i>=0 && j>=0;i--,j--)		//upper left digonal
		if(board[i][j])
			return false;
			
	for(i=row,j=col;j>=0 && i<n;i++,j--)          //lower right diagonal
		if(board[i][j])
			return false;
	
	return true;
}

bool solveNQUtil(int board[MAX_N][MAX_N],int col,int n)
{
	if(col>=n)
		return true;
		
	for(int i=0;i<n;i++)
	{
		if(isSafe(board,i,col,n))
		{
			board[i][col] = 1;
			cout<<"Placed queen at ("<<i<<","<<col<<") : "<<endl;
			printSolution(board,n);
			
			if(solveNQUtil(board,col+1,n))
				return true;
			board[i][col] = 0;   //bracktarcking
			cout<<"Backtracking from ("<<i<<","<<col<<"):"<<endl;
			printSolution(board,n);
		}
	}
	return false;
}
int main()
{
	int n;
	cout<<"Enter N : ";
	cin>>n;
	
	if(n<=0 || n>MAX_N)
	{
		cout<<"Invalid board size"<<endl;
		return 0;
	}
	
	int board[MAX_N][MAX_N];
	
	for(int i=0;i<n;i++)
	{
		for(int j=0;j<n;j++)
		{
			board[i][j] = 0;
		}
	}
	
	if(!solveNQUtil(board,0,n))
		cout<<"Solution does not exists"<<endl;
	else
	{
		cout<<"Final Solution"<<endl;
		printSolution(board,n);
	}
	return 0;
}
