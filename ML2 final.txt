#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report


# In[2]:


df=pd.read_csv("emails1.csv")


# In[3]:


# Data preprocessing
X = df.drop(columns=['Email No.', 'Prediction'])
y = df['Prediction']


# In[4]:


# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# In[5]:


vectorizer = TfidfVectorizer()
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)


# In[6]:


knn = KNeighborsClassifier()
knn.fit(X_train, y_train)
y_pred_knn = knn.predict(X_test)


# In[7]:


# SVM Classifier
svm = SVC()
svm.fit(X_train, y_train)
y_pred_svm = svm.predict(X_test)


# In[8]:


# Evaluation
knn_accuracy = accuracy_score(y_test, y_pred_knn)
svm_accuracy = accuracy_score(y_test, y_pred_svm)


# In[9]:


# Evaluation
knn_accuracy = accuracy_score(y_test, y_pred_knn)
svm_accuracy = accuracy_score(y_test, y_pred_svm)


# In[10]:


print("KNN Classification Report: \n", classification_report(y_test, y_pred_knn))
print("SVM Classification Report: \n", classification_report(y_test, y_pred_svm))


# In[12]:


import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# Load the dataset
emails_df = pd.read_csv('emails1.csv')

# Features (X) are all columns except the last one
X = emails_df.iloc[:, :-1]  # All columns except the last one
y = emails_df['Prediction']  # The last column is the label

# Identify non-numeric columns
non_numeric_columns = X.select_dtypes(include=['object']).columns

# Drop non-numeric columns
X = X.drop(columns=non_numeric_columns)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# K-Nearest Neighbors Classifier
knn = KNeighborsClassifier()
knn.fit(X_train, y_train)

# Support Vector Machine Classifier
svm = SVC()
svm.fit(X_train, y_train)

# Model Evaluation
y_pred_knn = knn.predict(X_test)
y_pred_svm = svm.predict(X_test)

# Evaluate KNN
print("KNN Accuracy: ", accuracy_score(y_test, y_pred_knn))
print("KNN Classification Report: \n", classification_report(y_test, y_pred_knn))

# Evaluate SVM
print("SVM Accuracy: ", accuracy_score(y_test, y_pred_svm))
print("SVM Classification Report: \n", classification_report(y_test, y_pred_svm))

# Confusion matrices
print("KNN Confusion Matrix: \n", confusion_matrix(y_test, y_pred_knn))
print("SVM Confusion Matrix: \n", confusion_matrix(y_test, y_pred_svm))


# In[ ]:




