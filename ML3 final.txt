#!/usr/bin/env python
# coding: utf-8

# In[2]:


import numpy as np
import matplotlib.pyplot as plt


# In[3]:


def f(x):
    return (x+3)**2
def gradient(x):
    return 2*(x+3)


# In[13]:


def gradient_descent(starting_point, learning_rate, num_iterations):
    x=starting_point
    x_history=[x]
    for _ in range(num_iterations):
        grad=gradient(x)
        x=x-learning_rate*grad
        x_history.append(x)
    return x, x_history


# In[14]:


starting_point=2
learning_rate=0.1
num_iterations=30


# In[15]:


minima,x_history=gradient_descent(starting_point, learning_rate, num_iterations)


# In[17]:


print(f'Local Minima at: x ={minima} , y={f(minima)}')


# In[18]:


x_values = np.linspace(-6,0,100)
y_values = f(x_values)


# In[23]:





plt.plot(x_values, y_values, label='y=(x+3)^2')
plt.scatter(x_history, f(np.array(x_history)), color='red', label='Gradient Descent Path')
plt.xlabel('x')
plt.ylabel('y')
plt.legend()
plt.grid()
plt.show()


# In[ ]:




